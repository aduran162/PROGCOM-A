{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOz2UdOo1pYLVPJ+Cwm6EJz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aduran162/PROGCOM-A/blob/main/Untitled1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Estructuras de repetición\n",
        "Permite repetir una o mas acciones de acuerdo con uan condición(mientras se cumpla la condición)."
      ],
      "metadata": {
        "id": "8n9n19z5RbNG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Estructura para-for\n",
        "\n",
        "1. Cuando se sabe cunatas veces se repite una acción.\n",
        "2. Esta conformado por una condición inicial(CI)una condición final(CF) y pasos(frecuencia de repeticion).\n",
        "3. Esta estructura no se detendra, hasta alcanzar CF-1.\n",
        "\n",
        "Estructura general del for\n",
        "```\n",
        "for (variable) in range(CI,CF+1,paso):\n",
        "  Se repite (CF+1-CI)/paso veces una acción\n",
        "```\n",
        "Estructura resumida del for\n",
        "```\n",
        "for (variable) in range(cantidad):\n",
        "  Se repite cantidad de veces uan acción\n",
        "```\n",
        "Estructura for como iteración\n",
        "1. El para (for) itera tantas veces, como elementos tenga la lista.\n",
        "2. La variable toma el valor de cada elemento de la lista por iteración.\n",
        "```\n",
        "Lista=[1,2,3,4,5]\n",
        "  for (variable) in Lista:\n",
        "  se repite len(Lista)\n",
        "```\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "7cP4nGBLRue2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VXQFn5wnQlTZ",
        "outputId": "ebcfd210-8579-4b2f-f2db-5ab4907273cf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Digita un numero:7\n"
          ]
        }
      ],
      "source": [
        "#Hacer la tabla de multiplicar de un numero n\n",
        "n=int(input(\"Digita un numero:\"))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Tabla del {n}\")\n",
        "for holitas in range(1,11,1):\n",
        "  print(f\"{n} x {holitas} = {n*holitas}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "60rrFxTmVEhL",
        "outputId": "5e605eb4-3fb7-4296-e3c6-b610eeb25523"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tabla del 7\n",
            "7 x 1 = 7\n",
            "7 x 2 = 14\n",
            "7 x 3 = 21\n",
            "7 x 4 = 28\n",
            "7 x 5 = 35\n",
            "7 x 6 = 42\n",
            "7 x 7 = 49\n",
            "7 x 8 = 56\n",
            "7 x 9 = 63\n",
            "7 x 10 = 70\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Tablas del 1 al 10\")\n",
        "print(\"\")\n",
        "for tabla in range(1,11):\n",
        "  for numero in range(1,11):\n",
        "    print(f\"{tabla} x {numero} = {tabla*numero}\")\n",
        "    print(\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IO37wo_4WlN5",
        "outputId": "a556db90-b989-4f86-d371-e33a160ca7ea"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tablas del 1 al 10\n",
            "\n",
            "1 x 1 = 1\n",
            "\n",
            "1 x 2 = 2\n",
            "\n",
            "1 x 3 = 3\n",
            "\n",
            "1 x 4 = 4\n",
            "\n",
            "1 x 5 = 5\n",
            "\n",
            "1 x 6 = 6\n",
            "\n",
            "1 x 7 = 7\n",
            "\n",
            "1 x 8 = 8\n",
            "\n",
            "1 x 9 = 9\n",
            "\n",
            "1 x 10 = 10\n",
            "\n",
            "2 x 1 = 2\n",
            "\n",
            "2 x 2 = 4\n",
            "\n",
            "2 x 3 = 6\n",
            "\n",
            "2 x 4 = 8\n",
            "\n",
            "2 x 5 = 10\n",
            "\n",
            "2 x 6 = 12\n",
            "\n",
            "2 x 7 = 14\n",
            "\n",
            "2 x 8 = 16\n",
            "\n",
            "2 x 9 = 18\n",
            "\n",
            "2 x 10 = 20\n",
            "\n",
            "3 x 1 = 3\n",
            "\n",
            "3 x 2 = 6\n",
            "\n",
            "3 x 3 = 9\n",
            "\n",
            "3 x 4 = 12\n",
            "\n",
            "3 x 5 = 15\n",
            "\n",
            "3 x 6 = 18\n",
            "\n",
            "3 x 7 = 21\n",
            "\n",
            "3 x 8 = 24\n",
            "\n",
            "3 x 9 = 27\n",
            "\n",
            "3 x 10 = 30\n",
            "\n",
            "4 x 1 = 4\n",
            "\n",
            "4 x 2 = 8\n",
            "\n",
            "4 x 3 = 12\n",
            "\n",
            "4 x 4 = 16\n",
            "\n",
            "4 x 5 = 20\n",
            "\n",
            "4 x 6 = 24\n",
            "\n",
            "4 x 7 = 28\n",
            "\n",
            "4 x 8 = 32\n",
            "\n",
            "4 x 9 = 36\n",
            "\n",
            "4 x 10 = 40\n",
            "\n",
            "5 x 1 = 5\n",
            "\n",
            "5 x 2 = 10\n",
            "\n",
            "5 x 3 = 15\n",
            "\n",
            "5 x 4 = 20\n",
            "\n",
            "5 x 5 = 25\n",
            "\n",
            "5 x 6 = 30\n",
            "\n",
            "5 x 7 = 35\n",
            "\n",
            "5 x 8 = 40\n",
            "\n",
            "5 x 9 = 45\n",
            "\n",
            "5 x 10 = 50\n",
            "\n",
            "6 x 1 = 6\n",
            "\n",
            "6 x 2 = 12\n",
            "\n",
            "6 x 3 = 18\n",
            "\n",
            "6 x 4 = 24\n",
            "\n",
            "6 x 5 = 30\n",
            "\n",
            "6 x 6 = 36\n",
            "\n",
            "6 x 7 = 42\n",
            "\n",
            "6 x 8 = 48\n",
            "\n",
            "6 x 9 = 54\n",
            "\n",
            "6 x 10 = 60\n",
            "\n",
            "7 x 1 = 7\n",
            "\n",
            "7 x 2 = 14\n",
            "\n",
            "7 x 3 = 21\n",
            "\n",
            "7 x 4 = 28\n",
            "\n",
            "7 x 5 = 35\n",
            "\n",
            "7 x 6 = 42\n",
            "\n",
            "7 x 7 = 49\n",
            "\n",
            "7 x 8 = 56\n",
            "\n",
            "7 x 9 = 63\n",
            "\n",
            "7 x 10 = 70\n",
            "\n",
            "8 x 1 = 8\n",
            "\n",
            "8 x 2 = 16\n",
            "\n",
            "8 x 3 = 24\n",
            "\n",
            "8 x 4 = 32\n",
            "\n",
            "8 x 5 = 40\n",
            "\n",
            "8 x 6 = 48\n",
            "\n",
            "8 x 7 = 56\n",
            "\n",
            "8 x 8 = 64\n",
            "\n",
            "8 x 9 = 72\n",
            "\n",
            "8 x 10 = 80\n",
            "\n",
            "9 x 1 = 9\n",
            "\n",
            "9 x 2 = 18\n",
            "\n",
            "9 x 3 = 27\n",
            "\n",
            "9 x 4 = 36\n",
            "\n",
            "9 x 5 = 45\n",
            "\n",
            "9 x 6 = 54\n",
            "\n",
            "9 x 7 = 63\n",
            "\n",
            "9 x 8 = 72\n",
            "\n",
            "9 x 9 = 81\n",
            "\n",
            "9 x 10 = 90\n",
            "\n",
            "10 x 1 = 10\n",
            "\n",
            "10 x 2 = 20\n",
            "\n",
            "10 x 3 = 30\n",
            "\n",
            "10 x 4 = 40\n",
            "\n",
            "10 x 5 = 50\n",
            "\n",
            "10 x 6 = 60\n",
            "\n",
            "10 x 7 = 70\n",
            "\n",
            "10 x 8 = 80\n",
            "\n",
            "10 x 9 = 90\n",
            "\n",
            "10 x 10 = 100\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Tabla del {n}\")\n",
        "for holitas in range(10):\n",
        "  print(f\"{n} x {holitas+1} = {n*(holitas+1)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzhjJesNaT3-",
        "outputId": "666a5e6d-a058-4beb-867d-fc59edb62b1e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tabla del 10\n",
            "10 x 1 = 10\n",
            "10 x 2 = 20\n",
            "10 x 3 = 30\n",
            "10 x 4 = 40\n",
            "10 x 5 = 50\n",
            "10 x 6 = 60\n",
            "10 x 7 = 70\n",
            "10 x 8 = 80\n",
            "10 x 9 = 90\n",
            "10 x 10 = 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Tabla del {n}\")\n",
        "for holitas in range(n,11*n,n):\n",
        "  print(f\"{n} x {int(holitas/n)} = {n*int(holitas/n)}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSeuqBE1cC08",
        "outputId": "7a2a700d-eef9-4394-85d2-3a61467709b3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tabla del 10\n",
            "10 x 1 = 10\n",
            "10 x 2 = 20\n",
            "10 x 3 = 30\n",
            "10 x 4 = 40\n",
            "10 x 5 = 50\n",
            "10 x 6 = 60\n",
            "10 x 7 = 70\n",
            "10 x 8 = 80\n",
            "10 x 9 = 90\n",
            "10 x 10 = 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeros=[1,2,3,4,5,6,7,8,9,10]\n",
        "for num in numeros:\n",
        "  print(f\"{n} x {num} = {n*num}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qZGZPaQzhCmf",
        "outputId": "79cc8533-d269-4739-8c6f-377ca943f625"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 x 1 = 10\n",
            "10 x 2 = 20\n",
            "10 x 3 = 30\n",
            "10 x 4 = 40\n",
            "10 x 5 = 50\n",
            "10 x 6 = 60\n",
            "10 x 7 = 70\n",
            "10 x 8 = 80\n",
            "10 x 9 = 90\n",
            "10 x 10 = 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeros2=list(range(1,11))\n",
        "numeros2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BByol29Fhb6G",
        "outputId": "7f7b2a28-d2ed-437c-b9c7-5d03ecdf7123"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    }
  ]
}
