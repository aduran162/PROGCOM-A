{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOkJCRQBmdJ4GyhPoit6YGY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aduran162/PROGCOM-A/blob/main/Untitled3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##1\n"
      ],
      "metadata": {
        "id": "pbq2EmLv13IY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hqm6m7ljy1Hl",
        "outputId": "e886db4a-47f5-4b00-8ae1-6d266630a35f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "cuadrado = lambda x: x*x\n",
        "\n",
        "cuadrado(5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def cuadrado(x):\n",
        "    return x*x\n",
        "\n",
        "cuadrado(7)"
      ],
      "metadata": {
        "id": "YdOJJnjB189V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##2\n"
      ],
      "metadata": {
        "id": "zicvz2tA16Ve"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "saludos = [\n",
        "    \"¡Hola {0}! ¿Cómo estás?\",\n",
        "    \"¡Qué tal, {0}! Un gusto saludarte.\",\n",
        "    \"¡Hey {0}! ¿Qué cuentas?\",\n",
        "    \"Saludos {0}, que tengas un buen día.\",\n",
        "    \"¡Buenos días {0}!\",\n",
        "    \"¡Buenas tardes {0}!\",\n",
        "    \"¡Hola {0}! Bienvenido.\",\n",
        "    \"¡Encantado de verte, {0}!\",\n",
        "    \"¡Hola {0}! Espero que estés bien.\",\n",
        "    \"¿Qué onda {0}?\",\n",
        "    \"¡Hola {0}! ¿Listo para aprender?\",\n",
        "    \"¡Ey {0}! ¿Cómo va todo?\",\n",
        "    \"¡Hola {0}! Un abrazo virtual.\",\n",
        "    \"¡Buenas {0}! Que vaya muy bien.\",\n",
        "    \"¡Hola {0}! Que tengas energía hoy.\",\n",
        "    \"¡Hola {0}! ¿Qué planes?\",\n",
        "    \"¡Bienvenido {0}!\",\n",
        "    \"¡Hola {0}! Mucha suerte hoy.\",\n",
        "    \"¡Hola {0}! Mantén la actitud.\",\n",
        "    \"¡Hola {0}! Disfruta tu día.\"\n",
        "]\n",
        "\n",
        "saludo = lambda nombre: random.choice(saludos).format(nombre)\n",
        "\n",
        "saludo(\"Andrés\")"
      ],
      "metadata": {
        "id": "JXNXC8pz2NEV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def saludo(nombre):\n",
        "    return random.choice(saludos).format(nombre)\n",
        "\n",
        "saludo(\"Pedro\")"
      ],
      "metadata": {
        "id": "g5EJ4PTQ2U8u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##3"
      ],
      "metadata": {
        "id": "EgMJWGU42YvD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "operaciones = lambda a,b: (a+b, a-b, a*b, a/b if b!=0 else None)\n",
        "\n",
        "operaciones(10,2)"
      ],
      "metadata": {
        "id": "pIE_PFk02a5X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def operaciones(a, b):\n",
        "    if b != 0:\n",
        "        return (a + b, a - b, a * b, a / b)\n",
        "    else:\n",
        "        return (a + b, a - b, a * b, \"No se puede dividir\")\n",
        "\n",
        "operaciones(5, 0)"
      ],
      "metadata": {
        "id": "SKps8Vjr2qSo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##4"
      ],
      "metadata": {
        "id": "Iy9jTRrH2t3T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "esmayor = lambda edad: \"Mayor de edad\" if edad >= 18 else \"Menor de edad\"\n",
        "\n",
        "esmayor(20)"
      ],
      "metadata": {
        "id": "qh4lBJ3F2vqz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def esmayor(edad):\n",
        "    if edad >= 18:\n",
        "        return \"Mayor de edad\"\n",
        "    else:\n",
        "        return \"Menor de edad\"\n",
        "\n",
        "esmayor(15)"
      ],
      "metadata": {
        "id": "zuY7h1PM2xtQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##5"
      ],
      "metadata": {
        "id": "l_LpffM9257r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "#Reciba una palabra y determine si es un palíndromo (se lee igual al derecho y al revés)\n",
        "\n",
        "# Con lambda\n",
        "es_palindromo = lambda palabra: palabra.lower() == palabra.lower()[::-1]\n",
        "\n",
        "es_palindromo(\"Ana\")"
      ],
      "metadata": {
        "id": "dYynkpe13Fs6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def es_palindromo(palabra):\n",
        "    palabra = palabra.lower()\n",
        "    if palabra == palabra[::-1]:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "es_palindromo(\"Hola\")"
      ],
      "metadata": {
        "id": "aOJnH6Re3HcD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##6"
      ],
      "metadata": {
        "id": "4Dmg36yB3Lth"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "contar_vocales = lambda texto: sum(1 for letra in texto.lower() if letra in \"aeiou\")\n",
        "\n",
        "contar_vocales(\"Hola Mundo\")"
      ],
      "metadata": {
        "id": "2XNqZMJT3N27"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def contar_vocales(texto):\n",
        "    contador = 0\n",
        "    for letra in texto.lower():\n",
        "        if letra in \"aeiou\":\n",
        "            contador += 1\n",
        "    return contador\n",
        "\n",
        "contar_vocales(\"Python\")"
      ],
      "metadata": {
        "id": "6Dy3_L0t3OLJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##7"
      ],
      "metadata": {
        "id": "fGDlPcPj3SqN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "suma_lista = lambda lista: sum(lista)\n",
        "\n",
        "suma_lista([1, 2, 3])"
      ],
      "metadata": {
        "id": "tsjq41dt3UVl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def suma_lista(lista):\n",
        "    total = 0\n",
        "    for numero in lista:\n",
        "        total += numero\n",
        "    return total\n",
        "\n",
        "suma_lista([5, 10, 15])"
      ],
      "metadata": {
        "id": "R3Kj4aDg3Uoh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##8"
      ],
      "metadata": {
        "id": "u9LM1O_V3Zdh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mayor_menor = lambda lista: (max(lista), min(lista))\n",
        "\n",
        "mayor_menor([3, 7, 1, 9])"
      ],
      "metadata": {
        "id": "hK7SlCrc3cgg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def mayor_menor(lista):\n",
        "    mayor = lista[0]\n",
        "    menor = lista[0]\n",
        "    for numero in lista:\n",
        "        if numero > mayor:\n",
        "            mayor = numero\n",
        "        if numero < menor:\n",
        "            menor = numero\n",
        "    return (mayor, menor)\n",
        "\n",
        "mayor_menor([10, 20, 5, 8])"
      ],
      "metadata": {
        "id": "XNeljU1g3c5x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##9"
      ],
      "metadata": {
        "id": "h88pTP0d3fnB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "reverso = lambda lista: lista[::-1]\n",
        "\n",
        "reverso([1, 2, 3])"
      ],
      "metadata": {
        "id": "xreE-9IF3iZz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def reverso(lista):\n",
        "    nueva = []\n",
        "    for i in range(len(lista)-1, -1, -1):\n",
        "        nueva.append(lista[i])\n",
        "    return nueva\n",
        "\n",
        "reverso([\"a\", \"b\", \"c\"])"
      ],
      "metadata": {
        "id": "dmbjdJNz3itb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##10"
      ],
      "metadata": {
        "id": "5nUiAZX63nSh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nombres_vocal = lambda lista: sum(1 for n in lista if n[0].lower() in \"aeiou\")\n",
        "\n",
        "nombres_vocal([\"Ana\", \"Pedro\", \"Olga\", \"Luis\"])"
      ],
      "metadata": {
        "id": "WqrNvp4u3o9Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def nombres_vocal(lista):\n",
        "    contador = 0\n",
        "    for nombre in lista:\n",
        "        if nombre[0].lower() in \"aeiou\":\n",
        "            contador += 1\n",
        "    return contador\n",
        "\n",
        "nombres_vocal([\"Oscar\", \"Erika\", \"Mateo\"])"
      ],
      "metadata": {
        "id": "eTM4KeOV3pIo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##11"
      ],
      "metadata": {
        "id": "_oZ8gvTU332p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sin_repetidos = lambda lista: list(dict.fromkeys(lista))\n",
        "\n",
        "sin_repetidos([1,2,2,3,1])"
      ],
      "metadata": {
        "id": "fMwrQWZ-36HH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sin_repetidos(lista):\n",
        "    nueva = []\n",
        "    for elemento in lista:\n",
        "        if elemento not in nueva:\n",
        "            nueva.append(elemento)\n",
        "    return nueva\n",
        "\n",
        "sin_repetidos([\"a\",\"b\",\"a\",\"c\"])"
      ],
      "metadata": {
        "id": "qRTYJX0Z36oS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##12"
      ],
      "metadata": {
        "id": "jdAMK_o-3_UK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "es_primo = lambda n: n>1 and all(n%i!=0 for i in range(2,int(n**0.5)+1))\n",
        "primos = lambda lista: [x for x in lista if es_primo(x)]\n",
        "\n",
        "primos([1,2,3,4,5,16,17])"
      ],
      "metadata": {
        "id": "o1BHf2Bf4BNI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def es_primo(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, n):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "def primos(lista):\n",
        "    resultado = []\n",
        "    for num in lista:\n",
        "        if es_primo(num):\n",
        "            resultado.append(num)\n",
        "    return resultado\n",
        "\n",
        "primos([10,11,12,13,14])"
      ],
      "metadata": {
        "id": "zBHQG3Ms4Bhq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##13"
      ],
      "metadata": {
        "id": "cBvHr_TQ4FjL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mensaje = lambda p: f\"El nombre es {p['nombre']} y tiene {p['edad']} años\"\n",
        "\n",
        "mensaje({\"nombre\":\"Adrian\",\"edad\":17})"
      ],
      "metadata": {
        "id": "OHCPJuiK4G4h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def mensaje(p):\n",
        "    return f\"El nombre es {p['nombre']} y tiene {p['edad']} años\"\n",
        "\n",
        "mensaje({\"nombre\":\"David\",\"edad\":19})"
      ],
      "metadata": {
        "id": "y-iz_i1W4HR3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##14"
      ],
      "metadata": {
        "id": "WmqwxUHT4K8Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "total = lambda productos: sum(productos.values())\n",
        "\n",
        "total({\"Pan\":2000,\"Leche\":3500,\"Huevos\":28000})"
      ],
      "metadata": {
        "id": "lV6ddiGL4NUX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def total(productos):\n",
        "    suma = 0\n",
        "    for precio in productos.values():\n",
        "        suma += precio\n",
        "    return suma\n",
        "\n",
        "total({\"Jabón\":5700,\"Pastel\":3000,\"Limonada\":10000})"
      ],
      "metadata": {
        "id": "LvK9e1tT4Nja"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##15"
      ],
      "metadata": {
        "id": "zK2eLkKo4Rdm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "promedio = lambda notas: sum(notas.values())/len(notas)\n",
        "\n",
        "promedio({\"Ana\":4.0,\"Luis\":3.5,\"Caro\":5.0})"
      ],
      "metadata": {
        "id": "bR-BbVfo4TCL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def promedio(notas):\n",
        "    suma = 0\n",
        "    for n in notas.values():\n",
        "        suma += n\n",
        "    return suma / len(notas)\n",
        "\n",
        "promedio({\"Pedro\":2.5,\"Sofia\":4.5,\"Camila\":3.5})"
      ],
      "metadata": {
        "id": "544B9gnz4TNj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##16"
      ],
      "metadata": {
        "id": "rP9AxBt94X0f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "buscar = lambda notas,nombre: notas.get(nombre,\"no encontrado\")\n",
        "\n",
        "buscar({\"Ana\":4.0,\"Luis\":3.5},\"Luis\")"
      ],
      "metadata": {
        "id": "aJM9KgvW4Zm2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def buscar(notas,nombre):\n",
        "    if nombre in notas:\n",
        "        return notas[nombre]\n",
        "    else:\n",
        "        return \"no encontrado\"\n",
        "\n",
        "buscar({\"Ana\":4.0,\"Luis\":3.5},\"Pedro\")"
      ],
      "metadata": {
        "id": "_z1kOngz4Z1u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##17"
      ],
      "metadata": {
        "id": "zXmIswW_4erv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mejor = lambda notas: max(notas, key=notas.get)\n",
        "\n",
        "mejor({\"Ana\":4.0,\"Luis\":4.7,\"Caro\":4.5})"
      ],
      "metadata": {
        "id": "JtHP_f1F4gHw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def mejor(notas):\n",
        "    mayor = None\n",
        "    nota_mayor = -1\n",
        "    for nombre, nota in notas.items():\n",
        "        if nota > nota_mayor:\n",
        "            nota_mayor = nota\n",
        "            mayor = nombre\n",
        "    return mayor\n",
        "\n",
        "mejor({\"Pedro\":3.9,\"Sofia\":4.8,\"Camila\":4.2})"
      ],
      "metadata": {
        "id": "oI2FfTFK4f_v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##18"
      ],
      "metadata": {
        "id": "j7VSmNnS4kLW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "filtrar = lambda productos,limite: {k:v for k,v in productos.items() if v>limite}\n",
        "\n",
        "filtrar({\"Jabón\":5700,\"Pastel\":3000,\"Limonada\":10000},5000)"
      ],
      "metadata": {
        "id": "c_7l7Pt_4lM2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def filtrar(productos, limite):\n",
        "    resultado = {}\n",
        "    for nombre, precio in productos.items():\n",
        "        if precio > limite:\n",
        "            resultado[nombre] = precio\n",
        "    return resultado\n",
        "\n",
        "filtrar({\"Pan\":2000,\"Queso\":8000,\"Leche\":3500},3000)"
      ],
      "metadata": {
        "id": "6kre2TRh4lzX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##19"
      ],
      "metadata": {
        "id": "Krq_0ByP4qb-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "horas = lambda empleados: {k:sum(v) for k,v in empleados.items()}\n",
        "\n",
        "horas({\"Ana\":[4,5,3],\"Luis\":[8,8,4]})"
      ],
      "metadata": {
        "id": "S03lEdLa4sGX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def horas(empleados):\n",
        "    resultado = {}\n",
        "    for nombre, lista in empleados.items():\n",
        "        total = 0\n",
        "        for h in lista:\n",
        "            total += h\n",
        "        resultado[nombre] = total\n",
        "    return resultado\n",
        "\n",
        "horas({\"Pedro\":[6,7,5],\"Sofia\":[4,4,4]})"
      ],
      "metadata": {
        "id": "2_xZ34YJ4sYd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##20\n"
      ],
      "metadata": {
        "id": "j0F7m4i34wwo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "promedio_mayores = lambda est: sum([v['nota'] for v in est.values() if v['edad']>=18]) / len([v for v in est.values() if v['edad']>=18])\n",
        "\n",
        "promedio_mayores({\"Ana\":{\"nota\":4.5,\"edad\":19},\"Luis\":{\"nota\":3.8,\"edad\":17},\"Caro\":{\"nota\":5.0,\"edad\":20}})"
      ],
      "metadata": {
        "id": "wjnxSXsT4y1e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def promedio_mayores(estudiantes):\n",
        "    notas = []\n",
        "    for datos in estudiantes.values():\n",
        "        if datos[\"edad\"] >= 18:\n",
        "            notas.append(datos[\"nota\"])\n",
        "    if len(notas) == 0:\n",
        "        return 0\n",
        "    return sum(notas) / len(notas)\n",
        "\n",
        "promedio_mayores({\"Pedro\":{\"nota\":3.5,\"edad\":18},\"Sofia\":{\"nota\":4.2,\"edad\":16},\"Camila\":{\"nota\":4.8,\"edad\":21}})"
      ],
      "metadata": {
        "id": "dZwFDqXd4yte"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
